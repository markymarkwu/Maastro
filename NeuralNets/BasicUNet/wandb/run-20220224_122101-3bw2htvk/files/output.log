BasicUNet features: (6, 16, 32, 64, 128, 16).
Training ...
  0%|                                                     | 0/2 [00:00<?, ?it/s]
torch.Size([2, 189, 512, 512])
X: torch.Size([2, 71, 140, 195]) y: torch.Size([1, 71, 140, 195])
<input loaded>
<Foward finished>
<Backward finished>

 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Œ                      | 1/2 [01:17<01:17, 77.01s/it]
torch.Size([2, 189, 512, 512])
X: torch.Size([2, 71, 140, 195]) y: torch.Size([1, 71, 140, 195])
<input loaded>
100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2/2 [02:37<00:00, 78.54s/it]
  0%|                                                     | 0/2 [00:00<?, ?it/s]
<Backward finished>
Training loss after epoch 2: 0.9862168431282043
BasicUNet features: (6, 16, 32, 64, 128, 16).
Training ...
torch.Size([2, 189, 512, 512])
X: torch.Size([2, 71, 140, 195]) y: torch.Size([1, 71, 140, 195])
<input loaded>
<Foward finished>
<Backward finished>
  0%|                                                     | 0/2 [00:00<?, ?it/s][34m[1mwandb[39m[22m: [33mWARNING[39m Step must only increase in log calls.  Step 1 < 2; dropping {'train_epoch_loss': 0.9858769774436951, 'epoch': 1.0}.
[34m[1mwandb[39m[22m: [33mWARNING[39m Step must only increase in log calls.  Step 1 < 2; dropping {'val_epoch_loss': 0}.
 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Œ                      | 1/2 [00:58<00:58, 58.49s/it]
torch.Size([2, 189, 512, 512])
X: torch.Size([2, 71, 140, 195]) y: torch.Size([1, 71, 140, 195])
<input loaded>
<Foward finished>
<Backward finished>

100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2/2 [02:01<00:00, 60.72s/it]