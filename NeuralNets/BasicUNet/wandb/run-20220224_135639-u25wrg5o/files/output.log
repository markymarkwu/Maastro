BasicUNet features: (6, 16, 32, 64, 128, 16).
Training ...
  0%|                                                     | 0/2 [00:00<?, ?it/s]
torch.Size([2, 189, 512, 512])
X: torch.Size([2, 71, 140, 195]) y: torch.Size([1, 71, 140, 195])
<input loaded>

 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Œ                      | 1/2 [01:04<01:04, 64.31s/it]
<Backward finished>
Training loss after epoch 1: 0.9862762689590454
torch.Size([2, 189, 512, 512])
X: torch.Size([2, 71, 140, 195]) y: torch.Size([1, 71, 140, 195])
<input loaded>
100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2/2 [02:16<00:00, 68.04s/it]
  0%|                                                     | 0/2 [00:00<?, ?it/s]
<Backward finished>
Training loss after epoch 2: 0.9855280518531799
BasicUNet features: (6, 16, 32, 64, 128, 16).
Training ...
torch.Size([2, 189, 512, 512])
X: torch.Size([2, 71, 140, 195]) y: torch.Size([1, 71, 140, 195])
<input loaded>
<Foward finished>
<Backward finished>
  0%|                                                     | 0/2 [00:00<?, ?it/s][34m[1mwandb[39m[22m: [33mWARNING[39m Step must only increase in log calls.  Step 1 < 2; dropping {'train_epoch_loss': 0.986142635345459, 'epoch': 1.0, 'dropout': 0.5, 'learning_rate': 0.1, 'batch_size': 1}.
[34m[1mwandb[39m[22m: [33mWARNING[39m Step must only increase in log calls.  Step 1 < 2; dropping {'val_epoch_loss': 0, 'dropout': 0.5, 'learning_rate': 0.1, 'batch_size': 1}.
 50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Œ                      | 1/2 [01:06<01:06, 66.30s/it]
torch.Size([2, 189, 512, 512])
X: torch.Size([2, 71, 140, 195]) y: torch.Size([1, 71, 140, 195])
<input loaded>
<Foward finished>
<Backward finished>

100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2/2 [02:06<00:00, 63.42s/it]